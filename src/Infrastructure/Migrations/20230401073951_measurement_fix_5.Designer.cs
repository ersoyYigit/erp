// <auto-generated />
using System;
using ArdaManager.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArdaManager.Infrastructure.Migrations
{
    [DbContext(typeof(VappContext))]
    [Migration("20230401073951_measurement_fix_5")]
    partial class measurement_fix_5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ArdaManager.Application.Models.Chat.ChatHistory<ArdaManager.Infrastructure.Models.Identity.VappUser>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DocType")
                        .HasColumnType("int");

                    b.Property<string>("FromUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FromUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedDocId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ToUserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("ChatHistory", (string)null);
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Addressing.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Addressing.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Approval.ApprovalScenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ApprovalScenarios");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Approval.ApprovalStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApprovalScenarioId")
                        .HasColumnType("int");

                    b.Property<int>("StepNumber")
                        .HasColumnType("int");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalScenarioId");

                    b.ToTable("ApprovalSteps");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Approval.DocumentApprovalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ApprovalStepId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BaseDocId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalStepId");

                    b.HasIndex("BaseDocId");

                    b.ToTable("DocumentApprovalStatuses");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.BaseDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DocDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocState")
                        .HasColumnType("int");

                    b.Property<int>("DocType")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NextDocId")
                        .HasColumnType("int");

                    b.Property<int?>("PrevDocId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrevDocId")
                        .IsUnique()
                        .HasFilter("[PrevDocId] IS NOT NULL");

                    b.ToTable("BaseDocs");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.BaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BaseEntityType")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BaseEntities");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Catalog.MeasurementUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Factor")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("InclusiveId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Multipler")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("System")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeasurementUnits");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Catalog.Pattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patterns");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Catalog.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Catalog.RecipeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OwnerProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RecipeProductId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerProductId");

                    b.HasIndex("RecipeProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("RecipeItems");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Corporation.CompanyFair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FairId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FairId");

                    b.HasIndex("CompanyId", "FairId")
                        .IsUnique();

                    b.ToTable("CompanyFairs");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Corporation.Fair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fairs");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Corporation.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.ExtendedAttributes.DocumentExtendedAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Decimal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Json")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("DocumentExtendedAttributes");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Inventory.Rack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Section")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Racks");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Misc.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Misc.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sign")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Misc.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Misc.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Misc.ExchangeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("BanknoteBuying")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("BanknoteSelling")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<decimal>("ForexBuying")
                        .HasColumnType("decimal(18,8)");

                    b.Property<decimal>("ForexSelling")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Report.Warehouse.WarehouseReport", b =>
                {
                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WarehouseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseName")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("vw_warehouses_stocks");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseOfferRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOfferId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseRequestRowId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOfferId");

                    b.HasIndex("PurchaseRequestRowId");

                    b.ToTable("PurchaseOfferRows");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseOrderRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseOfferRowId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseRequestRowId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOfferRowId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("PurchaseRequestRowId");

                    b.ToTable("PurchaseOrderRows");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseRequestRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseRequestId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseRequestId");

                    b.ToTable("PurchaseRequestRows");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.WarehouseDocs.WarehouseReceiptRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,8)");

                    b.Property<int?>("RackId")
                        .HasColumnType("int");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseReceiptId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RackId");

                    b.HasIndex("WarehouseReceiptId");

                    b.ToTable("WarehouseReceiptRows");
                });

            modelBuilder.Entity("ArdaManager.Infrastructure.Models.Audit.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("ArdaManager.Infrastructure.Models.Identity.VappRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "Identity");
                });

            modelBuilder.Entity("ArdaManager.Infrastructure.Models.Identity.VappRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Identity");
                });

            modelBuilder.Entity("ArdaManager.Infrastructure.Models.Identity.VappUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureDataUrl")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Identity");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Catalog.Product", b =>
                {
                    b.HasBaseType("ArdaManager.Domain.Entities.BaseEntity");

                    b.Property<bool?>("BoolProperty1")
                        .HasColumnType("bit");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Diameter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DiameterMUId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiameterTolerance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("HeightMUId")
                        .HasColumnType("int");

                    b.Property<decimal>("HeightTolerance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImageDataURL")
                        .HasColumnType("text");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("LengthMUId")
                        .HasColumnType("int");

                    b.Property<decimal>("LengthTolerance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("PatternId")
                        .HasColumnType("int");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("TemplateState")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("WeightMUId")
                        .HasColumnType("int");

                    b.Property<decimal>("WeightTolerance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("WidthMUId")
                        .HasColumnType("int");

                    b.Property<decimal>("WidthTolerance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("int1")
                        .HasColumnType("int");

                    b.Property<int>("int2")
                        .HasColumnType("int");

                    b.Property<int>("int3")
                        .HasColumnType("int");

                    b.Property<string>("string1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("string2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("string3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("string4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("string5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("string6")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("PatternId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Corporation.Company", b =>
                {
                    b.HasBaseType("ArdaManager.Domain.Entities.BaseEntity");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Consignee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConsigneeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MeetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeetPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("RepresantativeId")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeRegistry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Vat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("RepresantativeId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Human.Person", b =>
                {
                    b.HasBaseType("ArdaManager.Domain.Entities.BaseEntity");

                    b.Property<string>("BCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSecondary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageDataURL")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneExt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CategoryId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Inventory.ProductionLine", b =>
                {
                    b.HasBaseType("ArdaManager.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ProductionLines");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Inventory.Warehouse", b =>
                {
                    b.HasBaseType("ArdaManager.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseOffer", b =>
                {
                    b.HasBaseType("ArdaManager.Domain.Entities.BaseDoc");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseRequestId")
                        .HasColumnType("int");

                    b.Property<string>("RequesterId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequesterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RequirementDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PurchaseRequestId");

                    b.ToTable("PurchaseOffers");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseOrder", b =>
                {
                    b.HasBaseType("ArdaManager.Domain.Entities.BaseDoc");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseOfferId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseRequestId")
                        .HasColumnType("int");

                    b.Property<string>("RequesterId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequesterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RequirementDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PurchaseOfferId");

                    b.HasIndex("PurchaseRequestId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseRequest", b =>
                {
                    b.HasBaseType("ArdaManager.Domain.Entities.BaseDoc");

                    b.Property<string>("RequesterId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequesterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RequirementDate")
                        .HasColumnType("datetime2");

                    b.ToTable("PurchaseRequests");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.TemplateWorkOrder", b =>
                {
                    b.HasBaseType("ArdaManager.Domain.Entities.BaseDoc");

                    b.Property<int?>("ConsumeProductId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatternId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PlannedWorkEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlannedWorkStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductionLineId")
                        .HasColumnType("int");

                    b.Property<string>("ResponseUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("TemplateWorkOrderState")
                        .HasColumnType("int");

                    b.Property<int>("TemplateWorkOrderType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WorkEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WorkStartDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("ConsumeProductId");

                    b.HasIndex("ProductionLineId");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateWorkOrders");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.WarehouseDocs.WarehouseReceipt", b =>
                {
                    b.HasBaseType("ArdaManager.Domain.Entities.BaseDoc");

                    b.Property<int?>("RelatedCompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedWarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseOfficerId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseReceiptType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WayBillDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WayBillNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("RelatedCompanyId");

                    b.HasIndex("RelatedWarehouseId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("WarehouseOfficerId");

                    b.ToTable("WarehouseReceipts");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Catalog.Mold", b =>
                {
                    b.HasBaseType("ArdaManager.Domain.Entities.Catalog.Product");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<string>("ModelOwner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TemplatePatternId")
                        .HasColumnType("int");

                    b.Property<int?>("UsageYear")
                        .HasColumnType("int");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TemplatePatternId");

                    b.ToTable("Molds");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Catalog.Template", b =>
                {
                    b.HasBaseType("ArdaManager.Domain.Entities.Catalog.Product");

                    b.Property<string>("CancelCause")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CancelationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Canceller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaultCause")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FaultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FaultFixer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FixDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAlabastr")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RevisionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevisionRequester")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevisionRequesterDepartment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("TemplateKind")
                        .HasColumnType("int");

                    b.Property<int?>("TemplatePatternId")
                        .HasColumnType("int");

                    b.HasIndex("TemplatePatternId");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("ArdaManager.Application.Models.Chat.ChatHistory<ArdaManager.Infrastructure.Models.Identity.VappUser>", b =>
                {
                    b.HasOne("ArdaManager.Infrastructure.Models.Identity.VappUser", "FromUser")
                        .WithMany("ChatHistoryFromUsers")
                        .HasForeignKey("FromUserId");

                    b.HasOne("ArdaManager.Infrastructure.Models.Identity.VappUser", "ToUser")
                        .WithMany("ChatHistoryToUsers")
                        .HasForeignKey("ToUserId");

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Addressing.City", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Addressing.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Approval.ApprovalStep", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Approval.ApprovalScenario", "ApprovalScenario")
                        .WithMany("ApprovalSteps")
                        .HasForeignKey("ApprovalScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovalScenario");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Approval.DocumentApprovalStatus", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Approval.ApprovalStep", "ApprovalStep")
                        .WithMany()
                        .HasForeignKey("ApprovalStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.BaseDoc", "BaseDoc")
                        .WithMany("ApprovalStatuses")
                        .HasForeignKey("BaseDocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovalStep");

                    b.Navigation("BaseDoc");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.BaseDoc", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.BaseDoc", "PrevDoc")
                        .WithOne("NextDoc")
                        .HasForeignKey("ArdaManager.Domain.Entities.BaseDoc", "PrevDocId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PrevDoc");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Catalog.RecipeItem", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Catalog.Product", "OwnerProduct")
                        .WithMany()
                        .HasForeignKey("OwnerProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Catalog.Product", "RecipeProduct")
                        .WithMany()
                        .HasForeignKey("RecipeProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Inventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerProduct");

                    b.Navigation("RecipeProduct");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Corporation.CompanyFair", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Corporation.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Corporation.Fair", "Fair")
                        .WithMany()
                        .HasForeignKey("FairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Fair");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.ExtendedAttributes.DocumentExtendedAttribute", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Misc.Document", "Entity")
                        .WithMany("ExtendedAttributes")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Inventory.Rack", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Inventory.Warehouse", "Warehouse")
                        .WithMany("Racks")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Misc.Category", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Misc.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Misc.Document", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Misc.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Misc.ExchangeRate", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Misc.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseOfferRow", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Catalog.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Catalog.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseOffer", "PurchaseOffer")
                        .WithMany("PurchaseOfferRows")
                        .HasForeignKey("PurchaseOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseRequestRow", "PurchaseRequestRow")
                        .WithMany()
                        .HasForeignKey("PurchaseRequestRowId");

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOffer");

                    b.Navigation("PurchaseRequestRow");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseOrderRow", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Catalog.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Catalog.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseOfferRow", "PurchaseOfferRow")
                        .WithMany()
                        .HasForeignKey("PurchaseOfferRowId");

                    b.HasOne("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderRows")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseRequestRow", "PurchaseRequestRow")
                        .WithMany()
                        .HasForeignKey("PurchaseRequestRowId");

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOfferRow");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("PurchaseRequestRow");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseRequestRow", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Catalog.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Catalog.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseRequest", "PurchaseRequest")
                        .WithMany("PurchaseRequestRows")
                        .HasForeignKey("PurchaseRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Product");

                    b.Navigation("PurchaseRequest");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.WarehouseDocs.WarehouseReceiptRow", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Catalog.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Catalog.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Inventory.Rack", "Rack")
                        .WithMany()
                        .HasForeignKey("RackId");

                    b.HasOne("ArdaManager.Domain.Entities.Transactions.WarehouseDocs.WarehouseReceipt", "WarehouseReceipt")
                        .WithMany("WarehouseReceiptRows")
                        .HasForeignKey("WarehouseReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Product");

                    b.Navigation("Rack");

                    b.Navigation("WarehouseReceipt");
                });

            modelBuilder.Entity("ArdaManager.Infrastructure.Models.Identity.VappRoleClaim", b =>
                {
                    b.HasOne("ArdaManager.Infrastructure.Models.Identity.VappRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ArdaManager.Infrastructure.Models.Identity.VappUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ArdaManager.Infrastructure.Models.Identity.VappUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ArdaManager.Infrastructure.Models.Identity.VappRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Infrastructure.Models.Identity.VappUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ArdaManager.Infrastructure.Models.Identity.VappUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Catalog.Product", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Misc.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("ArdaManager.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("ArdaManager.Domain.Entities.Catalog.Product", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Catalog.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Catalog.Pattern", "Pattern")
                        .WithMany()
                        .HasForeignKey("PatternId");

                    b.HasOne("ArdaManager.Domain.Entities.Catalog.Product", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("Category");

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Pattern");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Corporation.Company", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Misc.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("ArdaManager.Domain.Entities.Addressing.City", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId");

                    b.HasOne("ArdaManager.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("ArdaManager.Domain.Entities.Corporation.Company", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Corporation.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("ArdaManager.Domain.Entities.Human.Person", "Represantative")
                        .WithMany()
                        .HasForeignKey("RepresantativeId");

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Represantative");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Human.Person", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Misc.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("ArdaManager.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("ArdaManager.Domain.Entities.Human.Person", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Inventory.ProductionLine", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("ArdaManager.Domain.Entities.Inventory.ProductionLine", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Inventory.Warehouse", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("ArdaManager.Domain.Entities.Inventory.Warehouse", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseOffer", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Corporation.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.BaseDoc", null)
                        .WithOne()
                        .HasForeignKey("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseOffer", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseRequest", "PurchaseRequest")
                        .WithMany()
                        .HasForeignKey("PurchaseRequestId");

                    b.Navigation("Company");

                    b.Navigation("PurchaseRequest");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseOrder", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Corporation.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.BaseDoc", null)
                        .WithOne()
                        .HasForeignKey("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseOrder", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseOffer", "PurchaseOffer")
                        .WithMany()
                        .HasForeignKey("PurchaseOfferId");

                    b.HasOne("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseRequest", "PurchaseRequest")
                        .WithMany()
                        .HasForeignKey("PurchaseRequestId");

                    b.Navigation("Company");

                    b.Navigation("PurchaseOffer");

                    b.Navigation("PurchaseRequest");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseRequest", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.BaseDoc", null)
                        .WithOne()
                        .HasForeignKey("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseRequest", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.TemplateWorkOrder", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Catalog.Product", "ConsumeProduct")
                        .WithMany()
                        .HasForeignKey("ConsumeProductId");

                    b.HasOne("ArdaManager.Domain.Entities.BaseDoc", null)
                        .WithOne()
                        .HasForeignKey("ArdaManager.Domain.Entities.Transactions.TemplateWorkOrder", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Inventory.ProductionLine", "ProductionLine")
                        .WithMany()
                        .HasForeignKey("ProductionLineId");

                    b.HasOne("ArdaManager.Domain.Entities.Catalog.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsumeProduct");

                    b.Navigation("ProductionLine");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.WarehouseDocs.WarehouseReceipt", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.BaseDoc", null)
                        .WithOne()
                        .HasForeignKey("ArdaManager.Domain.Entities.Transactions.WarehouseDocs.WarehouseReceipt", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Corporation.Company", "RelatedCompany")
                        .WithMany()
                        .HasForeignKey("RelatedCompanyId");

                    b.HasOne("ArdaManager.Domain.Entities.Inventory.Warehouse", "RelatedWarehouse")
                        .WithMany()
                        .HasForeignKey("RelatedWarehouseId");

                    b.HasOne("ArdaManager.Domain.Entities.Inventory.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Human.Person", "WarehouseOfficer")
                        .WithMany()
                        .HasForeignKey("WarehouseOfficerId");

                    b.Navigation("RelatedCompany");

                    b.Navigation("RelatedWarehouse");

                    b.Navigation("Warehouse");

                    b.Navigation("WarehouseOfficer");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Catalog.Mold", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Corporation.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ArdaManager.Domain.Entities.Catalog.Product", null)
                        .WithOne()
                        .HasForeignKey("ArdaManager.Domain.Entities.Catalog.Mold", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Catalog.Pattern", "TemplatePattern")
                        .WithMany()
                        .HasForeignKey("TemplatePatternId");

                    b.Navigation("Company");

                    b.Navigation("TemplatePattern");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Catalog.Template", b =>
                {
                    b.HasOne("ArdaManager.Domain.Entities.Catalog.Product", null)
                        .WithOne()
                        .HasForeignKey("ArdaManager.Domain.Entities.Catalog.Template", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ArdaManager.Domain.Entities.Catalog.Pattern", "TemplatePattern")
                        .WithMany()
                        .HasForeignKey("TemplatePatternId");

                    b.Navigation("TemplatePattern");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Addressing.City", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Addressing.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Approval.ApprovalScenario", b =>
                {
                    b.Navigation("ApprovalSteps");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.BaseDoc", b =>
                {
                    b.Navigation("ApprovalStatuses");

                    b.Navigation("NextDoc");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Misc.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Misc.Document", b =>
                {
                    b.Navigation("ExtendedAttributes");
                });

            modelBuilder.Entity("ArdaManager.Infrastructure.Models.Identity.VappRole", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("ArdaManager.Infrastructure.Models.Identity.VappUser", b =>
                {
                    b.Navigation("ChatHistoryFromUsers");

                    b.Navigation("ChatHistoryToUsers");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Inventory.Warehouse", b =>
                {
                    b.Navigation("Racks");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseOffer", b =>
                {
                    b.Navigation("PurchaseOfferRows");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderRows");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.Purchase.PurchaseRequest", b =>
                {
                    b.Navigation("PurchaseRequestRows");
                });

            modelBuilder.Entity("ArdaManager.Domain.Entities.Transactions.WarehouseDocs.WarehouseReceipt", b =>
                {
                    b.Navigation("WarehouseReceiptRows");
                });
#pragma warning restore 612, 618
        }
    }
}
